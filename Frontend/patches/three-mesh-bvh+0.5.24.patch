diff --git a/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js b/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js
index 123456..789012 100644
--- a/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js
+++ b/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js
@@ -2,7 +2,9 @@ import {
 	Vector3,
 	Ray,
 	Mesh,
-	BatchedMesh,
+	// BatchedMesh is not available in this version of three.js
+	// Comment out to avoid error
+	// BatchedMesh,
 	Box3,
 	Line3,
 	Triangle,
@@ -141,7 +143,7 @@ export function extendRaycast() {
 		}
 
 		if (
-			target && ( target.isMesh || target.isBatchedMesh ) &&
+			target && ( target.isMesh /* || target.isBatchedMesh */ ) &&
 			target.geometry.boundsTree &&
 			target.material
 		) {
@@ -217,7 +219,7 @@ export function extendRaycast() {
 		findClosestDistance( bvh, rayToMesh, closestResult, 0, intersectToBvh ) {

 			// if we're performing a first hit ray cast then just use the built-in distance from
-			if ( this.firstHitOnly && ( this.target.isMesh || this.target.isBatchedMesh ) ) {
+			if ( this.firstHitOnly && ( this.target.isMesh /* || this.target.isBatchedMesh */ ) ) {

 				return rayToMesh.distanceToPlane( this.plane );

@@ -301,7 +303,7 @@ export function extractInstancedMatricesGroup( batchedMesh, matrixGroup ) {

 export function extractBatchMeshTargetGroup( batchedMesh, groupTarget ) {

-	let target = new BatchedMesh( 0, 0, null );
+	let target = {}; // mock BatchedMesh
 	const { geometry, materials } = batchedMesh;
 	const groupMetadata = {};
 
@@ -324,14 +326,14 @@ export function extractBatchMeshTargetGroup( batchedMesh, groupTarget ) {
 
 export function getBVHExtremes( bvh ) {
 
-	if ( bvh.root.batchedMesh ) {
+	/* if ( bvh.root.batchedMesh ) {
 
 		return {
 			depth: bvh.root.depth,
 			leafNodeCount: bvh.root.totalLeafNodeCount,
 			surfaceAreaScore: bvh.root.surfaceAreaScore,
 		};
-	}
+	} */
 
 	const _traverse = ( node, depth = 0 ) => {
 } 